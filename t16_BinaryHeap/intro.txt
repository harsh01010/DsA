
        Binary Heap
    used in :
        Heapsort
        in inplementation of priority queue

    Types:
        Min heap(highest priority item is assigned lowest value)
        Max Heap(highest priority item is assigned highest value)

advantages:
it's cache friendly we can have random access
it's complete binary tree 
*********************************************************************************************************************************

Binary heap is a complete Binary tree (stored as an array):

                                10
                              /   \ 
                             20    30
                           /   \   /    
                          40   50  60

                ind:   0  1  2  3  4  5
                     10  20  30  40 50 60   
                 we can find left right and parent at ith index by the formula:
                 left(i) = 2i+1
                 right(i) = 2i+2
                 parent(i) = floor(i-1)/2  
                 height = log(n)

******************************************************************************************************************************************************************
Min Heap:
    complete binary tree
    every node has value smaller than its descendants.

                                10
                              /   \ 
                             20    30
                           /   \   /    
                          40   50  60

                          10  20  30  40 50 60   
Max Heap:
    complete binary tree
    every node has value greater thant it's descendants.
*********************************************************************************************************************************************************************************
// class for binary heap
class MinHeap{
    int *arr;
    int size;
    int capacity;
    MinHeap(int c): arr(new int[c]) , size(0) , capacity(c) {}

    int left(int i){return 2*i+1;}
    int right(int i){return 2*i+2;}
    int parent(int i){return (i-1)/2;}
};

****inplementations****
#include <bits/stdc++.h>
using namespace std;

class minHeap
{
public:
    //int *arr;
    vector<int>arr;
    int left(int i) { return 2 * i + 1; }
    int right(int i) { return 2 * i + 2; }
    int parent(int i) { return (i - 1) / 2; }
    void displayArr(){for(int i=0;i<arr.size();i++)
                        cout<<arr[i]<<"\n";}

    bool insert(int n)
{
    arr.push_back(n);
    int i = arr.size()-1;
    while(i!=0 && arr[i]<arr[parent(i)] )
    {
        swap(arr[i], arr[parent(i)]);
        i = parent(i);
    }
    return true;
}

//first node(recursive , at each level) may be incorrectly placed
void minHeapify(int i)
{
    if(i==arr.size()) return;
    int li = left(i);
    int ri = right(i);
    int mini = i;
    if(li<arr.size() and arr[li]<arr[i])
        {mini = li;}
    if(ri<arr.size() and arr[ri]<arr[i])
        {mini = ri;}
    if(mini != i)
    {    swap(arr[i],arr[mini]);
        minHeapify(mini);
    }
}

int extractMin(){
    if(arr.size()==0) {return +1e9;}
    if(arr.size() == 1) { int x = arr[0];arr.pop_back();return x; }

    swap(arr[0],arr[arr.size()-1]);
    int val = arr[arr.size()-1];
    arr.pop_back();
    minHeapify(0);
return val;
}

bool decreaseKey(int i,int val){
    if(i<0 or i>arr.size()-1)return false;
    arr[i] = val;
    for(int j = i;j>=0 && arr[j]<arr[parent(j)];j=parent(j)) 
                {swap(arr[j],arr[parent(j)]);}
}

bool deleteKey(int i){
    // call decrease key for i , -INF
    // then to remove -INF -> extrack min
    if(i<0 or i>arr.size()-1) return false;
    decreaseKey(i,-1e9);
    extractMin();
    return true;
}
bool BuildHeap(){
    //minHeapify for all indexes smaller than or equal to bottom most right most internal node.(size-2 / 2)
    // last element = size-1 -> it's parent -> ((size-1)-1) / 2
    for(int i=(arr.size()-2)/2;i>=0;i--)
    {
        minHeapify(i);
    }
    return true;

}
};

class maxHeap{
    
    public:
    vector<int>arr;
    int left(int i) {return 2*i +1;}
    int right(int i) {return 2*i +2;}
    int parent(int i) {return (i-1)/2;}

    bool insert(int n);
    void maxHeapify(int i,int siz);
    void buildHeap();
};

bool maxHeap::insert(int n){
    arr.push_back(n);
    int curr_size = arr.size();
    for(int i = curr_size;parent(i)>=0 && arr[i]>arr[parent(i)];i=parent(i)) {swap(arr[i],arr[parent(i)]);}
    return true;
}
void maxHeap::maxHeapify(int i,int siz){
    if(i<0 or i==siz){return;}
    int maxi = i;
    int li = left(i);
    int ri = right(i);
    if(li<siz and arr[maxi]<arr[li]){maxi = li;}
    if(ri<siz and arr[maxi]<arr[ri]){maxi = ri;}

    if(maxi != i)
    {
        swap(arr[i],arr[maxi]);
        maxHeap::maxHeapify(maxi,siz);
    }
}
void maxHeap::buildHeap(){
    //start with bottom most right most internal node and maxHepify
    int i = parent(arr.size()-1);
    for(;i>=0;i--)
    {
        maxHeap::maxHeapify(i,arr.size());
    }
}

void heapSort(maxHeap &hp)
{
    hp.buildHeap();
    int n = hp.arr.size();
    for(int i=n-1;i>=1;i--)
    {
        swap(hp.arr[0],hp.arr[i]);
        hp.maxHeapify(0,i);
        
    }
}
int main()
{
    // minHeap hp;    
    // hp.insert(10);
    // hp.insert(40);
    // hp.insert(50);
    // hp.insert(25);
    // hp.insert(50);
    // hp.insert(45);
    // hp.insert(15);
    // hp.displayArr();
    // minHeap hp2;
    // hp2.arr = {15,40,50,25,45,10,50};
    // hp2.BuildHeap();
    // hp2.displayArr();
    maxHeap hp;
    hp.arr = {40,50,10,100,60,3,99,0};
    heapSort(hp);
    for(int it:hp.arr){cout<<it<<",";}

    
}